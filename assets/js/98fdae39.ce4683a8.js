"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[985],{4137:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>k});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=i.createContext({}),u=function(e){var n=i.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=u(e.components);return i.createElement(p.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},c=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),d=u(t),c=r,k=d["".concat(p,".").concat(c)]||d[c]||m[c]||a;return t?i.createElement(k,l(l({ref:n},s),{},{components:t})):i.createElement(k,l({ref:n},s))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,l=new Array(a);l[0]=c;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var u=2;u<a;u++)l[u]=t[u];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}c.displayName="MDXCreateElement"},395:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>k,frontMatter:()=>a,metadata:()=>o,toc:()=>u});var i=t(7462),r=(t(7294),t(4137));const a={},l="OTL Language",o={unversionedId:"reference/language",id:"reference/language",title:"OTL Language",description:"Grammar",source:"@site/docs/reference/language.md",sourceDirName:"reference",slug:"/reference/language",permalink:"/obsidian-typing/docs/reference/language",draft:!1,editUrl:"https://github.com/konodyuk/obsidian-typing/tree/main/docs/docs/reference/language.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Reference",permalink:"/obsidian-typing/docs/category/reference"},next:{title:"Field Types",permalink:"/obsidian-typing/docs/category/field-types"}},p={},u=[{value:"Grammar",id:"grammar",level:2},{value:"Identifiers",id:"identifiers",level:2},{value:"Identifier",id:"identifier",level:3},{value:"String Identifier",id:"string-identifier",level:3},{value:"Loose Identifier",id:"loose-identifier",level:3},{value:"Literal Values",id:"literal",level:2},{value:"String",id:"string",level:3},{value:"Number",id:"number",level:3},{value:"Boolean",id:"boolean",level:3},{value:"Array",id:"array",level:3},{value:"Object",id:"object",level:3},{value:"Tagged Strings",id:"tagged-strings",level:2},{value:"Function String",id:"function",level:3},{value:"Expression String",id:"expr",level:3},{value:"Markdown String",id:"markdown",level:3},{value:"CSS String",id:"markdown",level:3},{value:"Field Types",id:"field-type",level:2},{value:"Example",id:"example",level:2}],s=(d="OTLSyntaxCodeBlock",function(e){return console.warn("Component "+d+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var d;const m={toc:u},c="wrapper";function k(e){let{components:n,...t}=e;return(0,r.kt)(c,(0,i.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"otl-language"},"OTL Language"),(0,r.kt)("h2",{id:"grammar"},"Grammar"),(0,r.kt)(s,{mdxType:"OTLSyntaxCodeBlock"},'import {<#LOOSE_IDENTIFIER>, <#LOOSE_IDENTIFIER>} from <#STRING>\n\ntype <#LOOSE_IDENTIFIER> [extends <#LOOSE_IDENTIFIER>, ...] {\n    folder = <#STRING>\n    icon = <#STRING>\n    prefix = <#STRING>\n\n    fields {\n        // field_name: FieldType = "default value"\n        <#LOOSE_IDENTIFIER>: <#FIELD_TYPE> [= <#STRING>]\n        ...\n    }\n\n    style {\n        header = <#FUNCTION | #EXPR | #MARKDOWN>\n        footer = <#FUNCTION | #EXPR | #MARKDOWN>\n        link = <#FUNCTION | #EXPR>\n        show_prefix = <#STRING>\n        css_classes = <#ARRAY<#STRING>>\n        css = <#CSS>\n    }\n\n    actions {\n        <#IDENTIFIER> = {\n            name = <#STRING>\n            shortcut = <#STRING>\n            description = <#STRING>\n            script = <#FUNCTION>\n        }\n        ...\n    }\n\n    methods {\n        <#IDENTIFIER> = <#EXPR>\n        ...\n    }\n\n    hooks {\n        create = <#FUNCTION>\n\n        on_create = <#FUNCTION>\n        on_rename = <#FUNCTION>\n        on_remove = <#FUNCTION>\n\n        on_open = <#FUNCTION>\n        on_close = <#FUNCTION>\n\n        on_type_change = <#FUNCTION>\n        on_metadata_change = <#FUNCTION>\n    }\n}'),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"identifiers"},"Identifiers"),(0,r.kt)("h3",{id:"identifier"},"Identifier"),(0,r.kt)("p",null,"A basic naming convention without spaces, beginning with a letter or an underscore. It comprises letters, underscores, and digits."),(0,r.kt)("p",null,"Examples:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TypeName")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_TypeName")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T_Y_P_3_N_4_M_3")," (don't do this though).")),(0,r.kt)("h3",{id:"string-identifier"},"String Identifier"),(0,r.kt)("p",null,"A more flexible identifier encapsulated within a ",(0,r.kt)("a",{parentName:"p",href:"#string"},"String"),", allowing for spaces and characters outside the Latin alphabet."),(0,r.kt)("p",null,"Examples:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"Type Name With Spaces"')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043d\u0435 \u043d\u0430 \u043b\u0430\u0442\u0438\u043d\u0438\u0446e"'))),(0,r.kt)("h3",{id:"loose-identifier"},"Loose Identifier"),(0,r.kt)("p",null,"A combination of both ",(0,r.kt)("a",{parentName:"p",href:"#identifier"},"Identifiers")," and ",(0,r.kt)("a",{parentName:"p",href:"#string-identifier"},"String Identifiers"),", offering flexibility in naming."),(0,r.kt)("p",null,"Examples:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TypeName")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"Type Name With Spaces"'))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"literal"},"Literal Values"),(0,r.kt)("h3",{id:"string"},"String"),(0,r.kt)("p",null,"String value in single or double quotes. For multiline strings use 3 quotes."),(0,r.kt)("p",null,"Examples:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"single line double quote string"')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"'single line single quote string'")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'"""\nmulti line\ndouble quote string\n"""\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"'''\nmulti line\nsingle quote string\n'''\n")))),(0,r.kt)("h3",{id:"number"},"Number"),(0,r.kt)("p",null,"Integer or floating point number."),(0,r.kt)("p",null,"Examples:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"10000")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"2.71828"))),(0,r.kt)("h3",{id:"boolean"},"Boolean"),(0,r.kt)("p",null,"Boolean value."),(0,r.kt)("p",null,"Examples:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"true")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"false"))),(0,r.kt)("h3",{id:"array"},"Array"),(0,r.kt)("p",null,"Multiple values of specified type."),(0,r.kt)("p",null,"Examples:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[1, 2, 3]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'["css-class-1", "css-class-2"]'))),(0,r.kt)("h3",{id:"object"},"Object"),(0,r.kt)("p",null,"Key-value container."),(0,r.kt)("p",null,"Examples:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'{\n    name = "Action Name"\n    shortcut = "a"\n    script = function"""\n        import {do_something} from "something"\n        do_something()\n    """\n}\n')))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"tagged-strings"},"Tagged Strings"),(0,r.kt)("p",null,"Tagged string consists of a ",(0,r.kt)("a",{parentName:"p",href:"#string"},"String")," prefixed with a tag (",(0,r.kt)("a",{parentName:"p",href:"#identifier"},"Identifier"),")."),(0,r.kt)("p",null,"Examples:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'tag"string"')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'some_tag"""\nmulti line\ndouble quote string\n"""\n')))),(0,r.kt)("p",null,"The tags allow string values to be interpreted differently than regular strings.\nBelow are the specifications of available tags."),(0,r.kt)("h3",{id:"function"},"Function String"),(0,r.kt)("p",null,"Prefixed with ",(0,r.kt)("inlineCode",{parentName:"p"},"function")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"fn")," ."),(0,r.kt)("p",null,"Defines a function body. The function may or may not return something. The function can access the following variables: ",(0,r.kt)("inlineCode",{parentName:"p"},"api"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ctx"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"note"),"."),(0,r.kt)("p",null,"Examples:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'fn"""\n    import { Breadcrumb } from "./utils/breadcrumb"\n    return <Breadcrumb note={note} />\n"""\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'fn"""\n    import { do_something, return_nothing } from "./something"\n    do_something(ctx)\n    return_nothing()\n"""\n')))),(0,r.kt)("h3",{id:"expr"},"Expression String"),(0,r.kt)("p",null,"Prefixed with ",(0,r.kt)("inlineCode",{parentName:"p"},"expr"),"."),(0,r.kt)("p",null,"Defines a single line expression which is evaluated into value.\nYou can think of it as of a single-line function where ",(0,r.kt)("inlineCode",{parentName:"p"},"return")," is omitted.\nThe following values are equivalent:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'fn"return 1 + 2"')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'expr"1 + 2"'))),(0,r.kt)("p",null,"Examples:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"expr\"api.import('utils').fileRenamer\"")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'expr"""(a, b, c) => {\n    // method body\n}"""\n')))),(0,r.kt)("h3",{id:"markdown"},"Markdown String"),(0,r.kt)("p",null,"Prefixed with ",(0,r.kt)("inlineCode",{parentName:"p"},"markdown")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"md"),"."),(0,r.kt)("p",null,"Defines a markdown content. Exists for convenience, e.g. highlighting."),(0,r.kt)("p",null,"Examples:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'md"""\n    ## Comments\n    ```dataview\n    TASK FROM "typed/journal"\n    WHERE status = "C"\n    ```\n"""\n')))),(0,r.kt)("h3",{id:"markdown"},"CSS String"),(0,r.kt)("p",null,"Prefixed with ",(0,r.kt)("inlineCode",{parentName:"p"},"css"),"."),(0,r.kt)("p",null,"Defines CSS content."),(0,r.kt)("p",null,"Examples:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'css"""\n    width: 100%;\n\n    & p {\n        background: blue;\n    }\n"""\n')))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"field-type"},"Field Types"),(0,r.kt)("p",null,"Field types are grammatically specified as:"),(0,r.kt)(s,{mdxType:"OTLSyntaxCodeBlock"},"- #IDENTIFIER\n- #IDENTIFIER[#LITERAL|#FIELD_TYPE, #LITERAL|#FIELD_TYPE, ...]\n- #IDENTIFIER[#IDENTIFIER=#LITERAL|#FIELD_TYPE, #IDENTIFIER=#LITERAL|#FIELD_TYPE, ...]\n- #IDENTIFIER[#LITERAL|#FIELD_TYPE, #LITERAL|#FIELD_TYPE, ..., #IDENTIFIER=#LITERAL|#FIELD_TYPE, #IDENTIFIER=#LITERAL|#FIELD_TYPE, ...]`}</CodeBlock2>"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"See the reference to field types in ",(0,r.kt)("a",{parentName:"p",href:"/docs/category/field-types"},"Field Types"))),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-otl"},'import { "Imported Type" } from "../relative/path"\nimport { ImportedType2 } from "absolute/path/in/vault/to/file.ts"\n\ntype A extends "Imported Type", ImportedType2 {\n    folder = "typed/a"\n    icon = "far fa-a"\n    prefix = "A-{date_compact}"\n\n    style {\n        header = function"""\n            import {Breadcrumb} from "./breadcrumb"\n            return <Breadcrumb note={note} />\n        """\n        footer = markdown"""\n            ## Comments\n            ```dataview\n            TASK FROM "typed/journal"\n            WHERE status = "C"\n            ```\n        """\n        link = expr"""<span class="fancy-link">{ctx.linkText}</span>"""\n        show_prefix = "always"\n        css_classes = ["one", "two", "three"]\n        css = css"""\n            width: 100%;\n\n            & p {\n                background: blue;\n            }\n        """\n    }\n\n    fields {\n        a: Number = 1\n        b: Choice["a", "b", "c"] = "c"\n        c: Number[min=1, max=12] = 10\n        e: String\n        f: Tag[dynamic=True]\n        g: List[Tag[dynamic=True]]\n        h: Tag["a", "b", "c"]\n        i: List[Tag["a", "b", "c"]]\n        j: Tag["a", "b", "c", dynamic=True]\n        k: TagList["a", "b", "c", dynamic=True]\n        l: List[Number[min=1, max=12]]\n        m: List[Choice["a", "b", "c"]]\n        "n": Note["B"]\n        o: List[Note["B", "C"]]\n    }\n\n    actions {\n        one = {\n            name = "Action One"\n            shortcut = "a"\n            script = function"""\n                import {do_something} from "something"\n                do_something()\n            """\n        }\n    }\n\n    hooks {\n        create = function""""""\n\n        on_create = function""""""\n        on_rename = function""""""\n        on_remove = function""""""\n\n        on_open = function""""""\n        on_close = function""""""\n\n        on_type_change = function""""""\n        on_metadata_change = function""""""\n    }\n\n    methods {\n        method_one = expr"""() => {\n            return 1\n        }"""\n        method_two = expr"""(a, b) => {\n            return a + b + note.methods.method_one()\n        }"""\n    }\n}\n\ntype "B" extends "A" {}\ntype default {}\n')))}k.isMDXComponent=!0}}]);